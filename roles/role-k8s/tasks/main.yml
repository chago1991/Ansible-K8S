---
# tasks file for roles/role-k8s
- name: create folder for kubernetes outputs
  file:
    path: "{{ kubernetes_outputs_dir }}"
    state: directory
    recurse: yes

# tasks file for kubernetes
- name: Download Kubernetes signing key for v1.29
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /tmp/kubernetes-1.29-apt-keyring.gpg
    mode: 0644

- name: Check if Kubernetes signing key exists
  stat:
    path: /etc/apt/keyrings/kubernetes-1.29-apt-keyring.gpg
  register: key_stat

- name: Import Kubernetes signing key (if missing)
  command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-1.29-apt-keyring.gpg /tmp/kubernetes-1.29-apt-keyring.gpg
  when: not key_stat.stat.exists

- name: Add Kubernetes repository for v1.29
  lineinfile:
    path: /etc/apt/sources.list.d/kubernetes-1.29.list
    create: yes
    line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-1.29-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /'

- name: Update package lists
  apt:
    update_cache: yes

- name: Install k8s packages
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - kubelet={{ K8S_VERSION }} 
    - kubeadm={{ K8S_VERSION }}
    - kubectl={{ K8S_VERSION }}
    
- name: Template /etc/modules-load.d/k8s.conf
  template:
    src: ../templates/k8s.conf
    dest: /etc/modules-load.d/k8s.conf
    owner: root
    group: root
    mode: '0755'
 
- name: Template /etc/sysctl.d/k8s.conf
  template:
    src: ../templates/k8s-sysctl.conf
    dest: /etc/sysctl.d/k8s.conf
    owner: root
    group: root
    mode: '0755'

- name: sysctl
  shell: "sysctl --system"

- name: "modprobe overlay"
  modprobe:
    name: overlay
    state: present

- name: "modprobe br_netfilter"
  modprobe:
    name: br_netfilter
    state: present

# Disable kubelet kubeadm kubectl from apt upgrade
- name: Disable kubelet kubeadm and kubectl from apt upgrade
  ansible.builtin.shell: |
    apt-mark hold kubelet kubeadm kubectl
  args:
    executable: /bin/bash
  register: result
  until: result.failed == false
  retries: 2
  delay: 5

- name: Reset Cluster
  command: >
    kubeadm reset --force
  register: kubeadm_reset
  #when: master_ready is failed


# Initial K8S cluster on the first master node
- name: kubeadm init on the first master node
  shell: |
    kubeadm init --control-plane-endpoint {{ k8s_vip }}:6443 --upload-certs --kubernetes-version {{ k8s_version }} --pod-network-cidr {{ pod_cidr }} --ignore-preflight-errors=all > kubeadm-init-output.txt
  args:
    executable: /bin/bash
  when: ansible_hostname == groups.masterg[0]
  register: result
  until: result.failed == false
  retries: 2
  delay: 5


# Get kubeadm join information
- name: Get join info
  shell: |
    cat kubeadm-init-output.txt | grep -B 2 '\-\-control-plane \-\-certificate-key' | awk '/kubeadm/ {print $(NF-1)}'
    cat kubeadm-init-output.txt | grep -B 2 '\-\-control-plane \-\-certificate-key' | awk '/-cert-hash/ {print $(NF-1)}'
    cat kubeadm-init-output.txt | grep -B 2 '\-\-control-plane \-\-certificate-key' | awk '/certificate-key/ {print $(NF)}'
  args:
    executable: /bin/bash
  register: join_info
  when: ansible_hostname == groups.masterg[0]

# Set join info as facts
- name: Set join info as facts
  set_fact:
    join_info = "{{ join_info }}"
  when: ansible_hostname == groups.masterg[0]

# Join a node as a master node
- name: Join a node as a master node
  shell: |
    kubeadm join "{{ k8s_vip }}":6443 --token "{{ hostvars[groups['masterg'][0]]['join_info']['stdout_lines'][0] }}" --discovery-token-ca-cert-hash "{{ hostvars[groups['masterg'][0]]['join_info']['stdout_lines'][1] }}" --control-plane --certificate-key "{{ hostvars[groups['masterg'][0]]['join_info']['stdout_lines'][2] }}"
  args:
    executable: /bin/bash
  register: result
  until: result.failed == false
  retries: 2
  delay: 5
  when: ansible_hostname in groups['masterg'] and (ansible_hostname != groups.masterg[0])

# Join a node as a worker node
- name: Join a node as a worker node
  shell: |
    kubeadm join "{{ k8s_vip }}":6443 --token "{{ hostvars[groups['masterg'][0]]['join_info']['stdout_lines'][0] }}" --discovery-token-ca-cert-hash "{{ hostvars[groups['masterg'][0]]['join_info']['stdout_lines'][1] }}"
  args:
    executable: /bin/bash
  when: ansible_hostname in groups['workerg']
  register: result
  until: result.failed == false
  retries: 2
  delay: 5

# Config k8s context for the ansible remote user on masterg
- name: Config k8s context for the ansible remote user on masterg
  shell: |
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config
    echo 'source <(kubectl completion bash)' >> .bashrc
  args:
    executable: /bin/bash
  become: no
  when: ansible_hostname in groups['masterg']

# Install Calico network plugin
- name: Install Calico network plugin
  shell: |
    curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml -O
    kubectl apply -f calico.yaml
  args:
    executable: /bin/bash
  become: no
  when: 
    - ansible_hostname == groups.masterg[0]
    - kubernetes_network_provider == "calico"

- name: download cilium zipped archive
  get_url:
    url: https://github.com/cilium/cilium-cli/releases/download/{{ Kubernetes_cilium_version }}/cilium-linux-amd64.tar.gz
    dest: "{{ kubernetes_outputs_dir }}/cilium-linux-amd64.tar.gz"
  when: 
    - ansible_hostname == groups.masterg[0]
    - kubernetes_network_provider == "cilium"
    - kubernetes_cilium_init|bool

- name: extract cilium zipped archive
  unarchive:
    src: "{{ kubernetes_outputs_dir }}/cilium-linux-amd64.tar.gz"
    dest: "{{ kubernetes_outputs_dir }}"
    remote_src: yes
  when:
    - ansible_hostname == groups.masterg[0] 
    - kubernetes_network_provider == "cilium"
    - kubernetes_cilium_init|bool

- name: copy cilium bin file
  copy:
    src: "{{ kubernetes_outputs_dir }}/cilium"
    dest: /usr/local/bin/
    remote_src: yes
    mode: preserve
  when: 
    - ansible_hostname == groups.masterg[0]
    - kubernetes_network_provider == "cilium"
    - kubernetes_cilium_init|bool

- name: install kubernetes network provider cilium
  shell: cilium install > {{ kubernetes_outputs_dir }}/network_provider_cilium_installed
  when: 
    - ansible_hostname == groups.masterg[0]
    - kubernetes_network_provider == "cilium"
    - kubernetes_cilium_init|bool
  args:
    creates: "{{ kubernetes_outputs_dir }}/network_provider_cilium_installed"